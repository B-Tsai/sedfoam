/**
 * \file        tutorials_DyM.doc
 * \author      Cyrille Bonamy and Julien Chauchat
 * \date        June 03, 2021
 * \brief       Tutorials dynamic (doc)
 */
/*! \page tutorials_DyM Dynamic mesh tutorials

In this chapter we shall describe in detail the process of setup, simulation and post-processing for SedFoam test cases in the laminar flow regime.
All the tutorial cases are in the *tutorialsDyM* directory. The text herein is highly inspired from the OpenFOAM user-guide for the cavity tutorial available at http://cfd.direct/openfoam/user-guide/cavity/ but is adapted to the specificity of SedFoam.

The test cases provided with SedFoam are aimed to facilitate the learning as well as the development of new configurations. If you develop new feature do not hesitate to share your development with us so that we can incorporate them in the github repository and others will benefit from your work the way you benefited from the original SedFoam version!

\tableofcontents{xml:1}

A number of one-dimensional test cases are provided with reference solutions, analytical, experimental or numerical, to validate SedFoam implementation and developments. Most of these test cases are used in the contiunous integration procedure to verify new developments in SedFoam.

\section  FallingSphere_testcase FallingSphereMorphing: Falling sphere in pure fluid using a morphing mesh

This tutorial will describe how to pre-process, run and post-process a case corresponding to a pure sedimentation problem in a one-dimensional configuration using the two-phase flow equations. The geometry is shown in Figure 1 in which bottom boundary is a wall and the top boundary is an open boundary.  Initially, the flow is at rest and will be solved on a uniform mesh using the SedFoam solver for laminar, isothermal, incompressible two-phase flow. The numerical results are compared with experiments to validate the model in terms of settling curves, time evolution of concentration interface, and concentration profiles.

This tutorial we  study the free fall of a sphere with a diameter \f$D=15mm\f$ settling in silicon oil using the overset approach. The experimental setting consists in a rectangular box of \f$100 \times 100 \times 160mm\f$. The input parameters have been chosen to reproduce  the experiments of a settling sphere at Reynolds number equal to \f$Re=W^{obj}D/\nu^f=1.5\f$ CITE, where \f$W^{obj}\f$ is the terminal velocity of the sphere.   This benchmark is inspired by the
<a href="https://wiki.openfoam.com/Settling_Sphere_by_Michael_Alletto">online tutorial of a settling sphere of OpenFOAM</a>. The  physical parameters are summarized in  the following table:


<table>
<caption id="multi_row">Main physical parameters.</caption>
<tr><th>Properties   <th>Value
<tr><td>Sphere density   <td>\f$\rho^{obj}= 1120 \frac{kg}{m^3}\f$
<tr><td>Fluid density    <td>\f$\rho^f=970 \frac{kg}{m^3}\f$
<tr><td>Fluid viscosity     <td>\f$\nu^f=3.845  \cdot 10^{-4} \frac{m^2}{s}\f$
<tr><td>Sphere diameter   <td>\f$D=0.015 m\f$
</table>


\subsection preprocSphereOverset Pre-processing

Like in OpenFOAM, cases are setup by editing case files using a text editor such as atome, vscode/vscodium, emacs, vi, gedit, nedit, etc. The I/O uses a dictionary format with keywords. A case involves data for mesh, fields, properties, control parameters, etc  that are stored in a set of files within a case directory rather than in a single case file. The case directory is given a suitably descriptive name. This tutorial consists of a set of cases located in the SedFoam distribution under the folder *sedFoamDirectory/tutorialsDyM/FallingSphereOverset*.

\subsection MeshFallingSphereOverset Mesh generation and set-up
The numerical domain consists of two disconnected meshes. The background mesh, which remains static throughout the simulation, is an hexaedron of side  \f$6.66 D\f$ while the overset mesh that moves relative to the background mesh is an hexaedron of side  \f$2.5 D\f$. These meshes are illustrated in Figure 1.
The overset mesh is generated by running the command *blockMesh* in the *tutorialsDyM/FallingSphereOverset/sphereMesh* folder. Then, the meshing utility *snappyHexMesh* is  executed to generate a finer mesh near the spherical object.
The meshing, refinement  process and scale transformation are generated by running:

\verbatim
blockMesh
snappyHexMesh -overwrite
transformPoints -scale '0.0075'
\endverbatim

Finally, *topoSet* needs to be executed to add the moving cells CHECK

Alternatively, one can execute *./Allrun.pre* in the *tutorialsDyM/FallingSphereOverset/sphereMesh* folder to generate the overset mesh.

Afterwards, we need to generate the background mesh and merge the two meshes. To do so, we will execute the *./Allrun.pre* command in the *tutorialsDyM/FallingSphereOverset/sphereAndBackground* folder. By running *./Allrun.pre*  we are executing a sequence of several commands that we can break down here one by one to understand their meaning:

\verbatim
blockMesh
topoSet -dict system/topoSetDictR2
refineMesh -dict system/refineMeshDict2 -overwrite
\endverbatim

The mesh is generated and *topoSet* and *refineMesh* are called to refine the mesh along the vertical direction of the sphere trajectory. Then,

\verbatim
mergeMeshes . ../sphereMesh -overwrite
topoSet
\endverbatim

The cylinder is added into our set-up and *topoSet* is executed to select cellSets for the different zones COMPLETE.

In the last part of *Allrun.pre* script we  create the intial time folder, use cellSets to write zoneID and decompose the case to run it in parallel:
\verbatim
cp -r 0.orig 0
setFields
decomposePar
\endverbatim


\subsection  DyMesh_SphereFallOverset Dynamic mesh


Several mesh options and controls can be adjusted in the *dynamicMeshDict* dictionary located at *constant* folder. In this file we need to specify that the motion solver (in our case *sixDoFRigidBodyMotionSedFoam*), the *patch* where the 6DoF is acting and set the moment of inertia and the apparent mass of the object.

\verbatim
/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2306                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      motionProperties;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

motionSolverLibs ( sixDoFRigidBodyMotionSedFoam );

dynamicFvMesh       dynamicOversetFvMesh;

dynamicOversetFvMeshCoeffs
{
}

motionSolver          sixDoFRigidBodyMotion;
accelerationRelaxation 0.4;

sixDoFRigidBodyMotionCoeffs
{
    patches         (sphere);
    innerDistance   100.;
    outerDistance   101.;

    accelerationRelaxation 0.4;
    accelerationDamping 0.4;

    //  mass reduced by Buoyancy: (rhosolid - rhofluid ) * VolumeSphere
    mass            2.65E-04;
    centreOfMass    ( 0 0 0 );
    momentOfInertia ( 4.45E-08 4.45E-08 4.45E-08);
    rho             rhoInf;
    rhoInf          970;
    g               (0 0 -9.81);
    report          on;
    reportToFile    on;

    solver
    {
        type Newmark;
    }
}
\endverbatim

\subsection  lauch_SphereFallOverset Computation launching

The simulations will run in parallel on 4 cores by executing:

\verbatim
mpirun -np 4 overSedDymFoam_rbgh -parallel > log.out&
\endverbatim

One can skip all the previous steps and simply run the command *./Allrun* in the *tutorialsDyM/FallingSphereOverset* folder. It is worth mentioning that the output data will be stored in the *tutorialsDyM/FallingSphereOverset/sphereAndBackground* folder.




*/
